// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;
import 'package:ffi/ffi.dart' as pkg_ffi;

/// Bindings to `bin/libmyfunc.h`.
class NativeLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int add(
    int a,
    int b,
  ) {
    return _add(
      a,
      b,
    );
  }

  late final _addPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>('add');
  late final _add = _addPtr.asFunction<int Function(int, int)>();

  int sumList(
    ffi.Pointer<ffi.Int> list,
    int length,
  ) {
    return _sumList(
      list,
      length,
    );
  }

  late final _sumListPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Int>, ffi.Int)>>(
      'sumList');
  late final _sumList =
      _sumListPtr.asFunction<int Function(ffi.Pointer<ffi.Int>, int)>();

  void increaseListValues(
    ffi.Pointer<ffi.Int> list,
    int length,
    int amount,
  ) {
    return _increaseListValues(
      list,
      length,
      amount,
    );
  }

  late final _increaseListValuesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Int>, ffi.Int, ffi.Int)>>('increaseListValues');
  late final _increaseListValues = _increaseListValuesPtr
      .asFunction<void Function(ffi.Pointer<ffi.Int>, int, int)>();

  void reverseString(
    ffi.Pointer<pkg_ffi.Utf8> str,
    ffi.Pointer<pkg_ffi.Utf8> result,
  ) {
    return _reverseString(
      str,
      result,
    );
  }

  late final _reverseStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pkg_ffi.Utf8>,
              ffi.Pointer<pkg_ffi.Utf8>)>>('reverseString');
  late final _reverseString = _reverseStringPtr.asFunction<
      void Function(ffi.Pointer<pkg_ffi.Utf8>, ffi.Pointer<pkg_ffi.Utf8>)>();
}
