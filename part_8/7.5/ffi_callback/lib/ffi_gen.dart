// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings to `src/lib_func.h`.
class NativeLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void startTimer(
    int milliseconds,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> timerCallback,
  ) {
    return _startTimer(
      milliseconds,
      timerCallback,
    );
  }

  late final _startTimerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int,
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'startTimer');
  late final _startTimer = _startTimerPtr.asFunction<
      void Function(
          int, ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  void addValue(
    int a,
    int b,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int a, ffi.Int b)>>
        addDart,
  ) {
    return _addValue(
      a,
      b,
      addDart,
    );
  }

  late final _addValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Int a, ffi.Int b)>>)>>('addValue');
  late final _addValue = _addValuePtr.asFunction<
      void Function(
          int,
          int,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Void Function(ffi.Int a, ffi.Int b)>>)>();

  void addWithResult(
    int a,
    int b,
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Int a, ffi.Int b)>>
        addDart,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int result)>> callback,
  ) {
    return _addWithResult(
      a,
      b,
      addDart,
      callback,
    );
  }

  late final _addWithResultPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<
                  ffi.NativeFunction<ffi.Int Function(ffi.Int a, ffi.Int b)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Int result)>>)>>('addWithResult');
  late final _addWithResult = _addWithResultPtr.asFunction<
      void Function(
          int,
          int,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Int Function(ffi.Int a, ffi.Int b)>>,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Void Function(ffi.Int result)>>)>();
}
